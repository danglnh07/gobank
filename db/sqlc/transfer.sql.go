// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transfer (
    from_account_id,
    to_account_id,
    amount
) VALUES (
    $1, $2, $3
) RETURNING transfer_id, from_account_id, to_account_id, amount, created_at
`

type CreateTransactionParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransaction, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transfer 
WHERE transfer_id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, transferID int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, transferID)
	return err
}

const getTransaction = `-- name: GetTransaction :one
SELECT transfer_id, from_account_id, to_account_id, amount, created_at FROM transfer
WHERE transfer_id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, transferID int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, transferID)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listTransaction = `-- name: ListTransaction :many
SELECT transfer_id, from_account_id, to_account_id, amount, created_at FROM transfer
ORDER BY transfer_id
LIMIT $1
OFFSET $2
`

type ListTransactionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTransaction(ctx context.Context, arg ListTransactionParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, listTransaction, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.TransferID,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transfer
SET amount = $2
WHERE transfer_id = $1
RETURNING transfer_id, from_account_id, to_account_id, amount, created_at
`

type UpdateTransactionParams struct {
	TransferID int64 `json:"transfer_id"`
	Amount     int64 `json:"amount"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction, arg.TransferID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.TransferID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
